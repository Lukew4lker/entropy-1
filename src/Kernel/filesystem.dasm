; --------------------------------------------
; Title:                                A File Driver to work with Entropy's FAT 16 based File System
; Author:                               Liraal
; Editor:                               LukeW4lker
; Date of creation:     2012-10-31
; --------------------------------------------
 
;=============================================
;VARIABLES
;=============================================
:fd_drive_cur   dat 0x0
:fd_working_dir dat 0x0         ;later the fd is going to read these from the end of FAT -
:fd_FAT_offset  dat 0xC8        ;-                                                                                                               -
:fd_FAT_number  dat 0x3         ;-                                                                                                               -
:fd_root_offset dat 0xCB        ;---------------------------------------------------------
:fd_FAT                 dat 0x0
:fd_dir_entry           dat 0x0, 0x0, 0x0, 0x0
                      	dat 0x0, 0x0, 0x0, 0x0
                        dat 0x0, 0x0, 0x0, 0x0
                        dat 0x0, 0x0, 0x0, 0x0
:fd_dir_entry_end
:fd_drive_table dat 0x0
:fd_drive_cap           dat 0x8
:fd_boot_drive  dat 0x0
:fd_file_table  dat 0x0         ;File table - table containing data on all open files. format is as follows:
;words 1-16 - file DTE.
;17. word - process which has the file opened, 0xFFFF if opened read-only;
;18. word - file address;
;19. word - currently opened sector of file
:fd_working_dirs .reserve 16; 16 comes from the number of processes supported.
;=============================================
;ROUTINES
;=============================================
 
;---------------------------------------------
;I/O
;---------------------------------------------
 
:fd_load_drive  ;loads drive FAT table into memory
 
:fd_unload_drive        ;unloads drive FAT
 
:fd_change_drive        ;A - drive number from 0 to [fd_drive_cap]
set A, push
mul A, 0x2
add A, [fd_drive_table]
set [fd_drive_cur], [A]
add A, 0x1
set [fd_FAT], [A]
set A, pop
set pc, pop
 
:fd_write_sector                ;A - sector number, C - location in memory
set push, Z
set Z, 3
set pc, fd_load_sector_start
 
:fd_load_sector         ;A - sector number, C - location in memory
set push, Z
set Z, 2
:fd_load_sector_start
set push, A
set push, B
set push, C
set push, X
set push, Y
set X, A
set Y, C
set A, Z
hwi [fd_drive_cur]
:fd_load_sector_loop_b
set A, 0
hwi [fd_drive_cur]
ife B, 3
set pc, fd_load_sector_loop_b
set Y, pop
set X, pop
set C, pop
set B, pop
set A, pop
set Z, pop
set pc, pop
 
;---------------------------------------------
;FAT ACCESS
;---------------------------------------------
 
:fd_load_FAT
ifn [fd_FAT], 0x0
        set pc, pop
set push, A
set push, B
set push, C
set A, [fd_FAT_number]
set B, A
shl A, 9
jsr mm_request_memory
set C, A
set [fd_FAT], C
set A, [fd_FAT_offset]
add B, A
:.loop
jsr fd_load_sector
add C, 0x200
add A, 0x1
ifl A, B
        set pc, .loop
set C, pop
set B, pop
set A, pop
set pc, pop
 
:fd_update_FAT
ife [fd_FAT], 0x0
        set pc, pop
set push, A
set push, C
set A, [fd_FAT_offset]
set C, [fd_FAT]
:.loop
jsr fd_write_sector
add C, 0x200
add A, 0x1
ifl A, [fd_root_offset]
        set pc, .loop
set C, pop
set A, pop
set pc, pop
 
:fd_get_FAT_entry
set push, B
set B, [fd_FAT]
add B, A
set A, [B]
set B, pop
set pc, pop
 
:fd_free_FAT
ife [fd_FAT], 0x0
        set pc, pop
set push, A
set A, [fd_FAT]
jsr mm_free_memory
set [fd_FAT], 0x0
set A, pop
set pc, pop
 
:fd_get_free_sector     ;A - a free sector or 0xFFFF if none
set push, X
set push, Y
set push, Z
set Y, 0x59F
sub Y, [fd_root_offset]
ife [fd_FAT], 0x0
        dat 0x0 ;error handler here
set Z, [fd_FAT]
add Z, 0x1FF
set A, [Z]
add A, [fd_FAT]
 :fd_get_free_sector_loop
 ife [A], 0x0
        set pc, fd_get_free_sector_end
 add A, 0x1
 ifg A, Y
        jsr fd_get_free_sector_bound
 ifn X, 0x2
        set pc, fd_get_free_sector_loop
 sub A, [fd_FAT]
 set [Z], A
 set Z, pop
 set Y, pop
 set X, pop
 set A, 0xFFFF
 set pc, pop
 :fd_get_free_sector_end
 sub A, [fd_FAT]
 set [Z], A
 set Z, pop
 set Y, pop
 set X, pop
 set pc, pop
 
:fd_get_free_sector_bound
set A, [fd_FAT]
add X, 0x1
set pc, pop
 
;---------------------------------------------
;FILE ACCESS
;---------------------------------------------
 
:fd_create_file ;A - file length
ife A, 0x0
        set pc, pop
set push, B
set push, C
set push, I
set push, J
jsr fd_get_free_sector
add A, [fd_FAT]
set [A], 0xFFFF
sub A, [fd_FAT]
set B, A
set C, 0x0
set I, 0x0
set J, A
sub J, 0x1
ife J, 0x0
 set pc, fd_create_file_end
        :fd_create_file_loop
        jsr fd_get_free_sector
        ife C, 0x0
                set C, A
        ife A, 0xFFFF
                dat 0x0 ;not enough space. how about an error handler?
        add A, [fd_FAT]
        set [A], B
        sub A, [fd_FAT]
        set B, A
        add I, 0x1
        ifn I, J
                set pc, fd_create_file_loop
add A, [fd_FAT]
set [A], 0xFFFF
set A, C
:fd_create_file_end
jsr fd_update_FAT
set J, pop
set I, pop
set C, pop
set B, pop
set pc, pop    
 
:fd_delete_file ;A - starting cluster
 
:fd_write_file_sector ;A - file starting cluster, B - sector number in file A, C - location in memory to read from
jsr fd_get_file_sector
jsr fd_write_sector
set pc, pop
 
:fd_load_file_sector    ;A - file starting cluster, B - sector number in file A, C - location in memory to read to
jsr fd_get_file_sector
jsr fd_load_sector
set pc, pop
 
:fd_get_file_sector
set push, I
set push, C
set I, 0x0
:.loop
set C, A
jsr fd_get_FAT_entry
add I, 0x1
ifn I, B
        set pc, .loop
set C, pop
set I, pop
set pc, pop
 
:fd_get_file_length     ;args: A - starting cluster, output A - length
set push, I
set I, 0x0
:.loop
add I, 0x1
jsr fd_get_FAT_entry
ifn A, 0xFFFF
        ifl I, 0x5A0
        set pc, .loop
set A, I
set I, pop
set pc, pop
 
:fd_load_file_pop_return_error  ;in case of not enough memory to load a file
set A, pop
set Y, pop
set X, pop
set I, pop
set C, pop
set B, pop
set A, 0x0
set pc, pop
 
 
 
:fd_load_prog ; Load program A into memory. Will allocate 16 extra words of space.
;The same as fd_load_file for now.
 
:fd_load_file   ;args: A - starting cluster of the file to load. output: A - address of loaded file
set push, B
set push, C
set push, I
set push, X
set push, Y
set push, A
jsr fd_get_file_length
mul A, 0x200
jsr mm_request_memory
ife a, 0x0      ;error detection
    set pc, fd_load_file_pop_return_error
set X, A
set Y, A
set A, pop
set I, 0x0
 
 
:.loop
add I, 0x1
set B, 0x1
set C, X
add A, [fd_root_offset]
jsr fd_load_sector
add X, 0x200
sub A, [fd_root_offset]
set B, A
jsr fd_get_FAT_entry
ifn A, 0xFFFF
        ifl I, 0x5A0
                set pc, .loop
 
set A, Y
set Y, pop
set X, pop
set I, pop
set C, pop
set B, pop
set pc, pop
 
:fd_edit_file   ;args: A - starting cluster of the file to edit; B - address in memory to write from
set push, A
set push, B
set push, C
set push, I
set push, X
set I, 0x0
 
:.loop
add I, 0x1
set B, 0x1
set C, X
add A, [fd_root_offset]
jsr fd_write_sector
add X, 0x200
sub A, [fd_root_offset]
set B, A
jsr fd_get_FAT_entry
ifn A, 0xFFFF
        ifl I, 0x5A0
                set pc, .loop
 
set X, pop
set I, pop
set C, pop
set B, pop
set A, pop
set pc, pop
 
:fd_get_free_file_table_entry   ;0xFFFF if none
set push, I
set A, [fd_file_table]
set I, 0x0
:.loop
ife [A], 0x0
        set pc, .end
add A, 0x13
add I, 0x1
ifn I, 0x10
        set pc, .loop
set A, 0xFFFF
set I, pop
set pc, pop
:.end
set I, pop
set pc, pop
 
:fd_open_file ; Open file A for reading and writing.
set push, X
set X, A
jsr fd_get_free_file_table_entry
ifn A, 0xFFFF
        set pc, .continue
set X, pop
set pc, pop
:.continue
set push, B
set push, C
set B, A
set push, B
sub peek, [fd_file_table]
div peek, 0x13
set A, X
;add loading of the DTE
add B, 0x10
set [B], [current_process]
add B, 0x1
set A, 0x200
jsr mm_request_memory
set [B], A
set A, pop
set C, pop
set B, pop
set X, pop
set pc, pop
 
:fd_assign              ;copies C words from A to B
ife C, 0x0
        set pc, pop
set push, I
set push, J
set push, C
set I, B
set J, A
:.loop
sti [I], [J]
sub C, 0x1
ifn C, 0x0
        set pc, .loop
set C, pop
set J, pop
set I, pop
set pc, pop
 
:fd_clear               ;sets C words starting from A to 0x0
ife C, 0x0
        set pc, pop
set push, I
set push, J
set push, C
set I, A
:.loop
sti [I], 0x0
sub C, 0x1
ifn C, 0x0
        set pc, .loop
set C, pop
set J, pop
set I, pop
set pc, pop
 
:fd_compare     ;compare C words in A to C words in B; 0x0 if equal, 0xFFFF if not
ife C, 0x0
        set pc, pop
set push, B
set push, C
:.loop
ifn [A], [B]
        set pc, .wrong
add A, 0x1
add B, 0x1
sub C, 0x1
ifn C, 0x0
        set pc, .loop
set A, 0x0
set C, pop
set B, pop
set pc, pop
:.wrong
set A, 0xFFFF
set C, pop
set B, pop
set pc, pop
 
:fd_close_file ; Close file A.
set push, A
set push, B
set push, C
mul A, 0x13
add A, [fd_file_table]
add A, 0x11
set B, A
set A, [B]
ifn A, 0x0
        jsr mm_free_memory
sub B, 0x11
set A, B
set C, 0x13
jsr fd_clear
set C, pop
set B, pop
set A, pop
set pc, pop
 
 
;by Lukew4lker
:fd_find_file_dte ; (not tested)
; input
; a- starting address of file name string (11 chars)
; b - Cluster dir sector number if 0xffff use current processes wd
; output
; a - offset of file dte in cluster b
set push, j
set push, i
set push, y
set push, x
set push, c
set push, a
set a, 0x200
jsr mm_request_memory
ife a, 0xffff
   set pc, .error0001
set c, a
ife b, 0xffff
        set pc, .usewd
set a, b
add a, [fd_root_offset]; translates useable sector numbers into actual drive sector numbers
 
:.endusewd ;by this point, A should point to the sector to be loaded
 
jsr fd_load_sector
set b, a; sector number is now stored in b
set a, pop ; a points to filename location
set i, a
set j, c
set y, 0x1
set x, 0x1
 
:.loop
ife x, 0x6
set pc, .foundfile
ifn [i],[j]
set pc, .looknextdte
ife x, 0x6
   ife y, 0x20
      set pc, .load_next_sector_of_dir
add x, 1
sti pc, .loop
 
:.usewd
set a, 0xffff
jsr fd_get_wd
add a, [fd_root_offset]; translates cluster numbers into actual drive sector numbers
set pc, .endusewd
 
:.looknextdte
set i, a ;put i back to the start
set j, c 
set x, y; x is going to be reset anyway
mul x, 0x10  
add j, x
And [j + 6], 0xff00
add y, 0x1
set x, 0x1
set pc, .loop
 
:.load_next_sector_of_dir
;Mainly just operates/changes B  
set j, c  
set push, a
sub b, [fd_root_offset]
set a, b
jsr fd_get_FAT_entry
ife a, 0xffff
    set pc, .eod
add b, [fd_root_offset]
set b, a
jsr fd_load_sector
set a, pop
set pc, .loop
 
:.error0001
set x, a
set a, c
jsr mm_free_memory
ife a, 0xffff
sub pc, 1
set a, x
set c, pop
set x, pop
set y, pop
set i, pop
set j, pop
set ex, 0x0fff
set pc, pop
 
 
:.eod;(file not found in directory)
set a, c
jsr mm_free_memory
ife a, 0xffff
sub pc, 1
set ex, 0x404
set a, 0xffff
set c, pop
set x, pop
set y, pop
set i, pop
set j, pop
set pc, pop
 
:.foundfile
set a, c
jsr mm_free_memory
ife a, 0xffff
sub pc, 1
set a, y
sub a, 1
sub b, [fd_root_offset]
set c, pop
set x, pop
set y, pop
set i, pop
set j, pop
set pc, pop
 
:fd_get_wd
; input a - prog id if 0xffff then use current pwd
; output a - the wd cluster number
set push, b
set b, fd_working_dirs
Ifn a, 0xffff
   set pc, .operation
add b, [current_process]
set pc, .noop
:.operation
add b, a
:.noop
set a, [b]
set b, pop
set pc, pop
 
:fd_cd
;  a - string of the dir you want to change to(obviously prepended with length)
; [a + 1] is if you want to cd from the pwd first
; uses ex to say that it didn't find the file(returns 404)
set push, z
set push, y
set push, x
set push, c
set push, b
set push, a
set z, [a]; z should remain the string length
set x, a; x contains the string
ife [x + 1], 0x0001
set pc, .chkwd1st
 
;Checking root first
set b, 0x0
 
:.chkdir
add x, 2
set a, x
jsr fd_find_file_dte
ife a, 0xffff
        set pc, .hndlerr001
jsr .usemm ; after this c is then the memory location.
set pc, .skipper
 
:.chkdirloop
jsr fd_find_file_dte
ife a, 0xffff
        set pc, .hndlerr002
:.skipper
set y, a                                ;y is now the number of the dte in cluster b.
set a, b                                ;a is now the is now the cluster we are looking at
 
:.dirclusterfinder              ;Find the cluster of the dir we want to change to that we lm
add a, [fd_root_offset]
jsr fd_load_sector
mul y, 0x10; mulpies to get to location of DTE
add c, y                                ;C is now looking at the correct dte.
add c, 0xe                              ;Location of cluster pointer in dte.
set y, 0x0 ;just because
set b, [c]; B is the Cluster number of the directory we are jumping too
add x, 8
set a, x; reset A back to the string location
sub z, 6
ife z, 0x0
set pc, .end
set pc, .chkdirloop
 
:.chkwd1st
;changes b to the cluster number of the current pwd.
set a, 0xffff
jsr fd_get_wd
set b, a
set b, 0xffff
set pc, .chkdir
 
:.usemm; use memory manager
set push, a
set a, 0x200
jsr mm_request_memory
ife a, 0xffff
        sub pc, 1
set c, a; c is the allocated memory
set a, pop
set pc, pop
 
:.end
set a, b
jsr fd_set_pwd
set a, c
jsr mm_free_memory
ife a, 0xffff
sub pc, 1
set a, pop
set b, pop
set c, pop
set x, pop
set y, pop
set z, pop
set pc, pop
 
:.hndlerr002
set a, c
jsr mm_free_memory
ife a, 0xffff
sub pc, 1
 
:.hndlerr001
set a, pop
set a, 0xffff
set b, pop
set c, pop
set x, pop
set y, pop
set z, pop
set ex, 0x0404
set pc, pop
 
:fd_set_pwd
;set pwd to "a"
set push, b
set b, fd_working_dirs
add b, [current_process]
set [b], a
set b, pop
set pc, pop
 
;NOT TESTED DO NOT USE
:fd_convert_string
;input - a string to be converted
set push, y
set push, x
set push, c
set push, b
:.beforeloop0000setup
set y, [a]; set z to the length of the input string
add a, 2
set c, 0x0
set b, pop ; from the memory you allocated earlier...
:.loop0000
ife c, 4
set pc, .noop
ife [a], 0x002f
set pc, .exitloop0000
add a, 1
add c, 1
set pc, .loop0000
:.exitloop0000
;a now points to the / char
sub a, c ; a is now poiting to the start of the string
sub c, 1 ; c is now the number of words that the first filename is long
jsr fd_assign
; setup for adding the null word
set x, 4
sub x, c ; x is the number of null words needed to correctly convert the string
sub y, c ; subtrac from the total length of this string so that when we get to 0 we can
; just exit and say the string is completely converted
sub c, 1
add b, c; b now points to the char after the end of the filename input string
:.loop0001
ife x, 0
set pc, .exitloop0001
add b, 1
set [b], 0x0
sub x, 1
set pc, .loop0001
:.noop
sub a, c
; a is now poiting to the start of the string
; c is now the number of words that the first filename is long
jsr fd_assign
:.exitloop0001
;the string now has it's null pad and we add the dir extention to the end so that this
;string can be used with fd_cd and by association fd_find_file_dte
add b, 1
set [b], 0x6469
add b, 1
set [b], 0x0072
; setup the registers for the next
add b, 1
add c, 2
add a, c
set c, 0x0
ife y, 0
set pc, .finished
set pc, .loop0000
 
:.finished
set push, b
set push, c
set push, x
set push, y
set pc, pop
 
 
 
:fd_find_sector ; Find sector B in file A.      ;Find and load, I assume?
:fd_apply ; Apply changes to file A. Do this before loading another sector in the file.
:fd_discard ; Discard changes to file A. Will reload the current sector from disk.
:fd_create ; Create file, dir or link A with flags B.
:fd_delete ; Delete file, dir or link A.
:fd_move ; Move file, dir or link A.
:fd_get_flags ; Get the flags for file A.
:fd_set_flags ; Set the flags for file A to B. Some flag changes will be reverted before applying.
:fd_get_props ; Get the properties (size, number of children, flags, create, edit and view times).      ;How should I get the number of children??
:fd_format ; Format disk A with the filesystem.
